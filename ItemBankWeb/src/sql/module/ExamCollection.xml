<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ExamCollection">

    <select id="selectExamCollectionForCount" parameterType="java.util.Map"
        resultType="INTEGER">
        select count(id) as num from tb_exam_collection
        where user_id=#{userId} and source=#{source}
    </select>

    <select id="selectExamCollectionByUsers" parameterType="java.util.Map"
        resultType="zh.co.item.bank.db.entity.TbExamCollectionBean">
        select user_id, source, create_time from tb_exam_collection where user_id in (#{newUserId}, #{oldUserId})
        group by source, user_id order by create_time desc
    </select>

	<select id="getExamTypes" parameterType="java.lang.String"
		resultType="java.lang.String">
		select exam_type
		from tb_exam_collection where
		source = #{source} group by exam_type
	</select>

	<select id="getStructureIds" parameterType="java.lang.String"
		resultType="java.lang.String">
		select structure_id
		from tb_exam_collection where
		source = #{source} group by structure_id
	</select>

	<select id="getPercentage" parameterType="zh.co.item.bank.model.entity.ExamReportModel"
		resultType="zh.co.item.bank.model.entity.ExamReportModel">
		select b.exam_type as examType,
		concat(round((a.rit / b.total * 100),2),'%') AS percentage,
		b.source from
		(select count(*) as
		rit
		from tb_exam_collection where answer=my_answer and
		exam_type=#{examType} and source = #{source} and user_id = #{userId})
		a,(select count(*) as
		total,exam_type,source from
		tb_exam_collection
		where
		exam_type=#{examType} and source = #{source} and user_id = #{userId}) b
	</select>

<!--
	<select id="getExamReport" parameterType="java.util.Map"
		resultType="zh.co.item.bank.model.entity.ExamModel">
		select w.*,f.img,f.subject from (
		    select report.*,que.context,que.context_key,que.context_after,que.a,que.b,que.c,que.d,que.father_id from (
				select (@rowNO := @rowNO+1)
				as rowNo, z.id,z.user_id as
				userId,z.question_id as no,z.answer,z.my_answer as
				myAnswer,z.structure_id as structureId,z.source, z.exam_type as
				examType, y.title
		        from
				(select a.*,c.value from
				tb_exam_collection a ,ts_code c where a.exam_type =
				c.key and
				c.name='exam_type') z,tb_question_structure y,(select @rowNO :=0) x
				where
				z.structure_id = y.id and z.source = #{source} and z.user_id =#{userId}
				order by id) report, tb_question que
	        where report.no=que.`no`) w
	   left join tb_first_level_directory f
	   on w.father_id=f.id
	</select>
-->
	<select id="getExamReport" parameterType="java.util.Map"
		resultType="zh.co.item.bank.model.entity.ExamModel">
		select (@rowNO := @rowNO+1)
		as rowNo, z.id,z.user_id as
		userId,z.question_id as no,z.answer,z.my_answer as
		myAnswer,z.structure_id as structureId,z.source, z.exam_type as
		examType, y.title from
		(select a.*,c.value from
		tb_exam_collection a ,ts_code c where a.exam_type =
		c.key and
		c.name='exam_type') z,tb_question_structure y,(select @rowNO :=0) x
		where
		z.structure_id = y.id and z.source = #{source} and z.user_id =#{userId}
		order by id
	</select>

	<select id="getMediaRate" parameterType="java.util.Map"
		resultType="java.lang.String">
		select m_rate from vb_exam_rate where user_id=#{userId} and source=#{source}
	</select>

	<select id="getMyScoreByExamType" parameterType="java.util.Map"
		resultType="zh.co.item.bank.model.entity.ScoreModel">
		select sum(my_score) as my_total_score,sum(score) as total_score,a.source,a.exam_type from vb_score a
		where source=#{source,jdbcType=CHAR} and exam_type=#{examType,jdbcType=CHAR} and user_id=#{userId,jdbcType=INTEGER}
	</select>

	<select id="getMyScoreByStructureId" parameterType="java.util.Map"
		resultType="zh.co.item.bank.model.entity.ScoreModel">
		select sum(my_score) as my_total_score,sum(score) as total_score,a.source,a.exam_type,a.structure_id from vb_score a
		where source=#{source,jdbcType=CHAR} and structure_id=#{structureId,jdbcType=CHAR} and user_id=#{userId,jdbcType=INTEGER}
	</select>

	<resultMap id="questionsResult" type="zh.co.item.bank.model.entity.QuestionStructure">  
      <result property="title" column="title"/>
      <collection property="firstLevels" ofType="zh.co.item.bank.model.entity.FirstLevelModel" >
	    <result column="subject" property="subject" jdbcType="VARCHAR" />
	    <result column="img" property="img" jdbcType="LONGVARBINARY" />
	      <collection property="questions" ofType="zh.co.item.bank.model.entity.ExamModel" >
	        <id column="no" property="no" jdbcType="INTEGER" />
		    <result column="rowNo" property="rowNo" jdbcType="CHAR" />
		    <result column="subject" property="context" jdbcType="VARCHAR" />
		    <result column="context" property="context" jdbcType="VARCHAR" />
		    <result column="context_key" property="contextKey" jdbcType="VARCHAR" />
		    <result column="context_after" property="contextAfter" jdbcType="VARCHAR" />
		    <result column="a" property="a" jdbcType="VARCHAR" />
		    <result column="b" property="b" jdbcType="VARCHAR" />
		    <result column="c" property="c" jdbcType="VARCHAR" />
		    <result column="d" property="d" jdbcType="VARCHAR" />
		    <result column="answer" property="answer" jdbcType="CHAR" />
		    <result column="my_answer" property="myAnswer" jdbcType="CHAR" />
		    <result column="analysis" property="analysis" jdbcType="VARCHAR" />
		    <result column="source" property="source" jdbcType="VARCHAR" />
		    <result column="father_id" property="fatherId" jdbcType="INTEGER" />
		    <result column="classify_id" property="classifyId" jdbcType="INTEGER" />
		    <result column="structure_id" property="structureId" jdbcType="INTEGER" />
	        <result column="delete_flag" property="deleteFlag" jdbcType="CHAR" />
	      </collection>
      </collection>
    </resultMap>

    <select id="selectReportStructure" parameterType="java.util.Map" resultMap="questionsResult">
		select b1.title, b2.* from tb_question_structure b1 right join
			(select (@rowNO := @rowNO+1) as rowNo, a1.my_answer, a2.*, a3.exam_type from tb_exam_collection a1,
				(select t1.*, t2.subject, t2.img from tb_question t1 left join tb_first_level_directory t2 on t1.father_id=t2.id) a2,
				tb_question_classify a3, (select @rowNO :=0) a4
			where a1.question_id = a2.no
			and a1.user_id = #{userId}
			and a2.source = #{source}
			and a3.id = a2.classify_id
			<if test="examType != null">
			and a3.exam_type = #{examType}
			</if>
			) b2
		on b2.structure_id=b1.id
    </select>

	<delete id="deleteBySource" parameterType="java.util.Map">
		delete from tb_exam_collection
		where source = #{source,jdbcType=CHAR} and user_id = #{userId,jdbcType=INTEGER}
		<if test="startTime != null">
			and create_time <![CDATA[ > ]]> #{startTime}
		</if>
		<if test="examType != null">
			and exam_type = #{examType}
		</if>
	</delete>

	<delete id="deleteExamCollectionOld" parameterType="zh.co.item.bank.db.entity.TbExamCollectionBean">
		  delete from tb_exam_collection where (source, user_id) in
        <foreach collection="list" item="item" index="index" open="(" separator="," close=")"> 
            (#{item.source,jdbcType=CHAR}, #{item.userId,jdbcType=INTEGER})
        </foreach>
	</delete>

	<insert id="insertExamCollection" parameterType="zh.co.item.bank.model.entity.ExamModel">
		insert into tb_exam_collection
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				user_id,
			</if>
			<if test="no != null">
				question_id,
			</if>
			<if test="answer != null">
				answer,
			</if>
			<if test="myAnswer != null">
				my_answer,
			</if>
			<if test="source != null">
				source,
			</if>
			<if test="structureId != null">
				structure_id,
			</if>
			<if test="examType != null">
				exam_type,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="no != null">
				#{no,jdbcType=INTEGER},
			</if>
			<if test="answer != null">
				#{answer,jdbcType=SMALLINT},
			</if>
			<if test="myAnswer != null">
				#{myAnswer,jdbcType=CHAR},
			</if>
			<if test="source != null">
				#{source,jdbcType=CHAR},
			</if>
			<if test="structureId != null">
				#{structureId,jdbcType=INTEGER},
			</if>
			<if test="examType != null">
				#{examType,jdbcType=CHAR},
			</if>
		</trim>
	</insert>

	<insert id="insertExamCollections" parameterType="zh.co.item.bank.model.entity.ExamModel">
		insert into tb_exam_collection (
				user_id,
				question_id,
				answer,
				my_answer,
				source,
				structure_id,
				exam_type)
		values
		<foreach collection="list" item="item" index="index" separator=",">
               (#{item.userId,jdbcType=INTEGER},
                #{item.no,jdbcType=INTEGER},
                #{item.answer,jdbcType=SMALLINT},
                #{item.myAnswer,jdbcType=CHAR},
                #{item.source,jdbcType=CHAR},
                #{item.structureId,jdbcType=INTEGER},
                #{item.examType,jdbcType=CHAR})
        </foreach>
	</insert>

    <update id="updateUserId" parameterType="java.util.Map">
        update tb_exam_collection set user_id=#{oldUserId} where user_id=#{newUserId}
    </update>

</mapper>